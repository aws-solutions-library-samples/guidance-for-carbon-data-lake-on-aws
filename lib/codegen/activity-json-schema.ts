import { PluginFunction, Types } from '@graphql-codegen/plugin-helpers'
import { GraphQLSchema} from 'graphql'
import tmp from 'tmp';
import fs from 'fs';
import { plugin as typescriptPlugin } from '@graphql-codegen/typescript';
import * as tjs from "typescript-json-schema";
import { resolve } from "path";
import replaceInFile from 'replace-in-file'

export const plugin: PluginFunction = async (schema: GraphQLSchema, _documents: Types.DocumentFile[], _config: any) => {
  // Use graphql codegen typescript plugin to generate typscript types
  const types = await typescriptPlugin(schema, [], _config);

  // Write those typescript types out to a temp file
  const typesFile = writeSyncToTemporaryFile(types.content, '.ts');

  // Remove the Maybe type that is generated by the graphql typescript plugin as it causes
  // the json schema generation library to not be able to create the correct types
  await replaceInFile.replaceInFile({
    files: typesFile,
    from: new RegExp('(Maybe<.*>)', 'gm'),
    to: (match: string) => match.replace('Maybe<', '').replace('>', ''),
  })

  // Create the program to generate a json schema
  const program = tjs.getProgramFromFiles(
    [resolve(typesFile)]
  );

  const settings: tjs.PartialArgs = {
    required: true,
    ignoreErrors: true
  };

  // Generate json schema from typescript Activity type
  const jsonSchema = tjs.generateSchema(program, "Activity", settings);

  return JSON.stringify(jsonSchema, null, 2);
};

const writeSyncToTemporaryFile = (content: string, extension: string) => {
  const path = tmp.fileSync({ postfix: extension }).name;
  fs.writeFileSync(path, content);
  return path;
};
