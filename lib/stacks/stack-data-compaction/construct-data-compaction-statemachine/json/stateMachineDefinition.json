{
  "Comment": "Nightly Data Compaction State Machine",
  "StartAt": "GLUE JOB: Data Compaction",
  "States": {
    "GLUE JOB: Data Compaction": {
      "Type": "Task",
      "Resource": "arn:aws:states:::glue:startJobRun.sync",
      "Parameters": {
        "JobName": "${dataCompactionJobName}"
      },
      "Next": "LAMBDA: Enumerate Compaction Directories"
    },
    "LAMBDA: Enumerate Compaction Directories": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultPath": null,
      "Parameters": {
        "Payload": {
          "dir_location": "today"
        },
        "FunctionName": "${enemerateDirectoriesFunction}"
      },
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "GLUE JOB: Data Flush"
    },
    "GLUE JOB: Data Flush": {
      "Type": "Task",
      "Resource": "arn:aws:states:::glue:startJobRun.sync",
      "Parameters": {
        "JobName": "${dataFlushJobName}"
      },
      "Next": "GLUE CRAWLER: Historical Data Crawler"
    },
    "GLUE CRAWLER: Historical Data Crawler": {
      "Type": "Task",
      "Parameters": {
        "Name": "${historicalCalculatorCrawlerName}"
      },
      "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
      "Next": "GET CRAWLER: Historical Data Crawler"
    },
    "GET CRAWLER: Historical Data Crawler": {
      "Type": "Task",
      "Next": "CHOICE: Crawler Successful",
      "Parameters": {
        "Name": "${historicalCalculatorCrawlerName}"
      },
      "Resource": "arn:aws:states:::aws-sdk:glue:getCrawler"
    },
    "CHOICE: Crawler Successful": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Crawler.State",
          "StringEquals": "READY",
          "Next": "INVOKE LAMBDA: Create Individual Athena Views"
        }
      ],
      "Default": "Wait"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "GET CRAWLER: Historical Data Crawler"
    },
    "INVOKE LAMBDA: Create Individual Athena Views": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${createIndividualAthenaViewsLambdaName}"
      },
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "INVOKE LAMBDA: Create Combined Athena Views"
    },
    "INVOKE LAMBDA: Create Combined Athena Views": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${createCombinedAthenaViewLambdaName}"
      },
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "End": true
    }
  }
}
